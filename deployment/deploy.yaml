apiVersion: v1
kind: Namespace
metadata:
  name: '${DEPLOYMENT_NAME}'
---
# APP
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: '${DEPLOYMENT_NAME}'
  name: '${DEPLOYMENT_NAME}'
  namespace: '${DEPLOYMENT_NAME}'
spec:
  progressDeadlineSeconds: 600
  replicas: ${MIN_REPLICAS}
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: '${DEPLOYMENT_NAME}'
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: '${DEPLOYMENT_NAME}'
    spec:
      containers:
        - image: '$ECR_URL/sony-${DEPLOYMENT_NAME}:${BUILD_NUMBER}'
          imagePullPolicy: Always
          name: '${DEPLOYMENT_NAME}'
          env:
            - name: DEPLOYMENT_NAME
              value: '${DEPLOYMENT_NAME}'
            - name: GIT_COMMIT
              value: '${GIT_COMMIT}'
            - name: BUILD_NUMBER
              value: '${BUILD_NUMBER}'
          ports:
            - containerPort: 80
              protocol: TCP
          resources:
            requests:
              cpu: "${RES_CPU}"
              memory: ${RES_RAM}
            limits:
              cpu: "${LIM_CPU}"
              memory: ${LIM_RAM}
          livenessProbe:
            httpGet:
              path: /health-check
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health-check
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
          lifecycle:
            preStop:
              exec:
                command: ['/bin/bash', '-c', 'sleep 15']
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
kind: Service
apiVersion: v1
metadata:
  name: '${DEPLOYMENT_NAME}'
  namespace: '${DEPLOYMENT_NAME}'
  labels:
    app: '${DEPLOYMENT_NAME}'
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: '${DEPLOYMENT_NAME}'
  type: ClusterIP
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: '${DEPLOYMENT_NAME}'
  namespace: '${DEPLOYMENT_NAME}'
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: 'letsencrypt-prod'
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
spec:
  rules:
    - host: '${INGRESS_URL}'
      http:
        paths:
        - backend:
            service:
              name: '${DEPLOYMENT_NAME}'
              port:
                number: 80
          path: /
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - '${INGRESS_URL}'
      secretName: '${DEPLOYMENT_NAME}-tls'


